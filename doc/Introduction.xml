<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="Introduction"><Heading> Getting started</Heading>
    <Section Label="Introduction_Teaser"><Heading>What can it do?</Heading>
        The SimplicialSurface-package contains this basic functionality:
        <Enum>
            <Item>Working with simplicial surfaces (and generalisations of them), for example: <Par/>
                <!-- TODO Alternative for text-version -->
                <Alt Only="TikZ">
                    \begin{tikzpicture}
                        % We need to define the drawing style
	
		        % First a tetrahedron
		        \begin{scope}[xshift=0cm]
			    \coordinate (A) at (0,0);
			    \coordinate (B) at (2,0);
		    	    \coordinate (C) at (0.8,1.5);
			    \coordinate (D) at (1.9,0.7);
			
			    \filldraw[face] (A) -- (B) -- (C) -- cycle;
			    \filldraw[face] (B) -- (C) -- (D) -- cycle;
			    \draw[dashed] (A) -- (D);
		        \end{scope}
		
		        % Second: four triangles in the form of a cone
		        \begin{scope}[xshift=3cm]
			    \coordinate (A) at (0,0);
			    \coordinate (B) at (1.7,0.5);
			    \coordinate (C) at (1.3,1.4);
			    \coordinate (D) at (0.5,1.5);
			    \coordinate (E) at (1,0.7);
			
			    % Take care to draw the faces in the back first
			    \filldraw[face] (A) -- (B) -- (C) -- cycle;
			    \filldraw[face] (A) -- (C) -- (D) -- cycle;
			    % Now the faces in the front
			    \filldraw[face] (A) -- (B) -- (E) -- cycle;
			    \filldraw[face] (A) -- (E) -- (D) -- cycle;
			    % Finally the dashed line for the "hidden" edge
			    \draw[dashed] (A) -- (C);
		        \end{scope}
		
		        % Three triangles that share an edge
		        \begin{scope}[xshift=6cm]
			    \coordinate (A) at (0,0);
			    \coordinate (B) at (0,1.5);
			    \coordinate (C) at (-0.7,0.4);
			    \coordinate (D) at (0.8,0.4);
			    \coordinate (E) at (0.9,0.8);
			
		    	    % draw back face first
			    \filldraw[face] (A) -- (B) -- (E) -- cycle;
			    % Now draw front faces
			    \filldraw[face] (A) -- (B) -- (C) -- cycle;
			    \filldraw[face] (A) -- (B) -- (D) -- cycle;
			    % Draw dashed line
			    \draw[dashed] (A) -- (E);
		        \end{scope}
		
		        % A butterfly of triangles
		        \begin{scope}[xshift=9cm]
			    \def\LUX{-0.8}
			    \def\LUY{-0.3}
			    \def\LMX{-1.2}
			    \def\LMY{0.5}
			    \def\LOX{-0.5}
			    \def\LOY{1}
			    \coordinate (A) at (0,0);
			    \coordinate (B) at (\LUX,\LUY);
			    \coordinate (C) at (\LMX,\LMY);
			    \coordinate (D) at (\LOX,\LOY);
			    \coordinate (E) at (-\LOX,\LOY);
			    \coordinate (F) at (-\LMX,\LMY);
			    \coordinate (G) at (-\LUX,\LUY);
			
	        	    \filldraw[face] (A) -- (B) -- (C) -- cycle;
			    \filldraw[face] (A) -- (C) -- (D) -- cycle;
			    \filldraw[face] (A) -- (E) -- (F) -- cycle;
			    \filldraw[face] (A) -- (F) -- (G) -- cycle;
		        \end{scope}
		
		        % An open cone of two triangles
		        \begin{scope}[xshift=1cm, yshift=-3cm]
			    \coordinate (A) at (0,0);
			    \coordinate (B) at (1.3,0.4);
			    \coordinate (C) at (0.4,1.3);
			
			    \filldraw[face] (A) -- (B) to[bend right=45] (C) -- cycle;
			    \filldraw[face] (A) -- (B) to[bend left=45] (C) -- cycle;
		        \end{scope}
		
		        % A surface from non-triangular shapes
		        \begin{scope}[xshift=4cm, yshift=-3cm]
			    \coordinate (A) at (0,0);
			    \coordinate (B) at (1,0);
			    \coordinate (C) at (0.5,0.6);
			    \coordinate (D) at (0,1);
			    \coordinate (E) at (0.5,1.3);
			    \coordinate (F) at (1,1);
			    \coordinate (G) at (1.7,0.8);
			    \coordinate (H) at (1.8,0.2);
			
			    \filldraw[face] (A) -- (B) -- (C) -- cycle;
			    \filldraw[face] (A) -- (C) -- (D) -- cycle;
			    \filldraw[face] (D) -- (C) -- (F) -- (E) -- cycle;
			    \filldraw[face] (C) -- (F) -- (G) -- (H) -- (B) -- cycle;
		        \end{scope}
                    \end{tikzpicture}
                </Alt>
            </Item>
            <Item>Working with edge colourings of simplicial surfaces (in general and for the purpose of an embedding). <!--TODO--> </Item>
            <Item>Treatment of folding and unfolding for these objects. <!--TODO--> </Item>
        </Enum>
        To use this package, you have to load it into GAP via
<Log>
gap&gt; LoadPackage("SimplicialSurfaces");
true
</Log>

    </Section>

    <!-- In this introduction the difficulty of the concepts slowly increases. This has been done on purpose to make each individual step easier (almost trivial) to follow. Ideally no one will be turned off by initial confusion over too many parameters. -->
         
    <Section Label="Introduction_Playing"><Heading>Playing with simplicial surfaces</Heading>
        Since the platonic solids are pre-defined we use them to show a few capabilities of this package.
        <!-- This sentence informs the user about a way to define some surfaces which helps them to test more cases themselves.
             It also connects the surfaces to something familiar. The formulation of this sentence is still dangerous as it should
             neither promise too much, nor trivialize the contents of this section. (TODO) -->
        We will use the cube as an example.<Par/>
        <Alt Only="TikZ">
            \begin{tikzpicture}
                % We need to define the drawing style
	
                \coordinate (FDL) at (0,0); % front down left
                \coordinate (FDR) at (2,0); % front down right
                \coordinate (FUL) at (0,2); % front up left
                \coordinate (BDL) at (1,1); % back up left
                \coordinate (BDR) at ($(FDR)+(BDL)$); % back down right
                \coordinate (FUR) at ($(FUL)+(FDR)$); % front up right
                \coordinate (BUL) at ($(FUL)+(BDL)$); % back up left
                \coordinate (BUR) at ($(FDR)+(FUL)+(BDL)$); % back up right

                % Draw the edges
                \foreach \x in {FDL, BDR, BUL}{
                    \draw[dashed, edge] (BDL) -- (\x);
                }
                \draw[edge] (FDL) -- (FDR) -- (FUR) -- (FUL) -- cycle;
                \draw[edge] (FDR) -- (BDR) -- (BUR) -- (FUR) -- cycle;
                \draw[edge] (FUL) -- (FUR) -- (BUR) -- (BUL) -- cycle;

                % Draw the vertices
                \foreach \x in {FDL, FDR, FUL, BDL, BDR, FUR, BUL, BUR} {
                    \fill[vertex] (\x) circle (2.5pt);
                }
            \end{tikzpicture}
        </Alt>
<Example>
gap&gt; surface := Cube();;
</Example>
        We can compute elementary properties of the surface
<Example>
gap&gt; NrOfVertices(surface);
8
gap&gt; NrOfEdges(surface);
12
gap&gt; NrOfFaces(surface);
6
gap&gt; EulerCharacteristic(surface);
2
</Example>
        and we can show that the surface is homeomorphic to a sphere by verifying that it is closed, connected and orientable.
<Example>
gap&gt; IsClosedSurface(surface);
true
gap&gt; IsConnected(surface);
true
gap&gt; IsOrientable(surface);
true
</Example>
        We can also compute more complicated properties like the automorphism group and check for isomorphisms between surfaces. 
    <!-- TODO do so--> 
        
    </Section>


    <Section Label="Introduction_EasyConstruction"><Heading>Constructing some surfaces</Heading>
        In the most cases one is not interested in the properties of platonic solids (usually one already knows a lot about them). Therefore we need a way to tell the package about the surfaces we are interested in. 
        <Alt Only="Text">
            As a test case we consider a surface that consists of only three triangles T1, T2 and T3. We want that T2 shares an edge with both T1 and T3, but T1 and T3 should not be connected otherwise.
        </Alt>
        <Alt Not="Text">
            As a test case we consider a surface of three triangles that are connected by edges, like this:
        </Alt>
        <Alt Only="TikZ">
            {
                \input{Image_ThreeTrianglesInLine.tex}
            }
        </Alt>

        An easy way to describe this information is by labelling faces and vertices. In our case each triangle is determined by its three vertices.
        <Alt Only="Text">
            The vertex of T1 that is not a vertex of T2 will be called V1, the vertex that is shared by all triangles is called V2, the final vertex of T1 is V3, the final vertex of T2 is V4 and the last vertex will be called V5.
            Then the face T1 consists of the vertices V1,V2,V3. The face T2 contains V2,V3,V4 and the face T3 has V2,V4,V5.
        </Alt>
        <Alt Only="TikZ">
            {
                \def\vertexLabels{1} % It does not matter to which value we set it
                \def\faceLabels{1}
                \input{Image_ThreeTrianglesInLine.tex}
            }
        </Alt>
        <Alt Not="Text">
            For example the face I consists of the vertices [1,2,3] and the face III has the vertices [2,4,5].
        </Alt>

        From this information we can construct the simplicial surface
<Example>
gap&gt; surf := SimplicialSurfaceByVerticesInFaces( 5, 3, [[1,2,3],[2,3,4],[2,4,5]] );;
</Example>
<!-- TODO implement this constructor without the extraneous numbers. -->
        that retains this information:
<Example>
gap&gt; VerticesOfFaces(surf);
[ [ 1, 2, 3 ], [ 2, 3, 4 ], [ 2, 4, 5 ] ]
</Example>

        A slightly more complicated example would be a Moebius-strip.
        <Alt Only="TikZ">
            \begin{tikzpicture}
                \coordinate [label=below:1] (A) at (0,0);
                \coordinate [label=above:2] (B) at (1.5,2);
                \coordinate [label=below:3] (C) at (3,0);
                \coordinate [label=above:4] (D) at ($(B)+(C)$);
                \coordinate [label=below:5] (E) at ($2*(C)$);
                \coordinate [label=above:1] (F) at ($2*(C)+(B)$);
                \coordinate [label=below:2] (G) at ($3*(C)$);

                % Draw a face with vertices 1,2,3 and label 4 in the middle
                \def\drawFace#1#2#3#4{
                    \filldraw[face] (#1) -- (#2) -- (#3) -- cycle;
                    \node at ($1/3*(#1)+1/3*(#2)+1/3*(#3)$) {#4};
                }

                \drawFace{A}{B}{C}{I}
                \drawFace{B}{C}{D}{II}
                \drawFace{C}{D}{E}{III}
                \drawFace{D}{E}{F}{IV}
                \drawFace{E}{F}{G}{V}
            \end{tikzpicture}
        </Alt>
        <Alt Not="Text">
            In this case the left-most and right-most edges are identified.
        </Alt>
<Example>
gap&gt; moebius := SimplicialSurfaceByVerticesInFaces(5,5,
                            [[1,2,3],[2,3,4],[3,4,5],[4,5,1],[5,2,1]]);;
gap&gt; IsOrientable(moebius);
false
</Example>
<!-- TODO can you avoid the colour loss? Can't we just use the gap-prompt as a left fixture -->
        
        <Subsection><Heading>Non-triangular faces</Heading>
            <!-- This is an optional section. It is necessary to give the 
                 people who are concerned about non-triangular faces something
                 to work with. At the same time it might be too much for those
                 who only care about triangles.
                 Therefore we aim to make this section easy to skip. It must not
                 be too long and it must not have essential information for 
                 triangular faces.
                 At the same time, many people that do not actually care about
                 it will read this section (it does not matter if we told them
                 to stop), for various reasons:
                 1) Some never skip. To accomodate them, the section should not
                    be too taxing and it should have something of interest for
                    them.
                 2) Some hope to further their understanding of the material by
                    reading this "advanced" section, for example by putting the
                    easier case into a more general context. For those readers
                    we should explain a bit about this context.
                 Overall this suggests that we put some contextual information
                 in this section that might be interesting to everyone. Since
                 we want to encourage skipping it at the same time, this has to
                 be rather mild information. -->
            If we want to construct surfaces with non-triangular faces, the
            method SimplicialSurfaceByVerticesInFaces needs a bit more
            information.
            <!-- This formulation should help people with skipping this section.
                 If someone only cares about triangles and is a bit impatient
                 they will hopefully say "I don't want that" and skip ahead.-->
            We consider the example of a pyramid that has a square as its base.
            <!--TODO find a better picture of this pyramid -->
            <Alt Only="TikZ">
                \begin{tikzpicture}
                    \coordinate [label=above:1] (A) at (1,5);
                    \coordinate [label=below:2] (B) at (0,0);
                    \coordinate [label=below:3] (C) at (3,0.5);
                    \coordinate [label=left:4] (D) at (-1,2);
                    \coordinate [label=right:5] (E) at ($(C)+(D)$);

                    \filldraw[face] (A) -- (B) -- (D) -- cycle;
                    \filldraw[face] (A) -- (B) -- (C) -- cycle;

                    \draw[edge, dashed] (D) -- (E);
                    \draw[edge, dashed] (C) -- (E);
                    \draw[edge, dashed] (A) -- (E);
                \end{tikzpicture}
            </Alt>
            To input this surface we have to enumerate the faces.
            <!-- TODO Is there a way to properly do this in the picture?-->
            But if we try to input the surface
<Example>
gap&gt; pyr := SimplicialSurfaceByVerticesInFaces( 5, 5, 
                    [[2,3,4,5], [1,2,3], [1,3,5], [1,5,4],[1,2,4]] );;
</Example>
            we notice something strange: The resulting surface is not closed!
<Example>
gap&gt; IsClosedSurface(pyr);
false
</Example>
            The problem lies in the definition of the square face since the
            vertices of a square do not determine its edges. For triangular
            faces this was not an isse since there is an edge between any
            two vertices of a triangle.<P/>
            
            <!--TODO find out how to properly typeset methods (and maybe even link to their more extensive documentation)-->
            The method SimplicialSurfaceByVerticesInFaces will believe that two
            adjacent vertices in the given list are also connected by an edge 
            of the face. Above, we gave the list [2,3,4,5] for the square. If 
            we compare it with our picture we can see that the vertices 2 and 4 
            are connected in the picture but not adjacent in our list. Likewise 
            the vertices 2 and 5 are adjacent in the list (we imagine that the 
            list wraps around) but don't have an edge between them in the 
            picture. <P/>
            
            Instead we have to give the vertices in a proper cyclic ordering:
<Example>
gap&gt; pyr := SimplicialSurfaceByVerticesInFaces( 5, 5, 
                    [[2,3,5,4], [1,2,3], [1,3,5], [1,5,4],[1,2,4]] );;
gap&gt; IsClosedSurface(pyr);
true
</Example>

        </Subsection>
        <!-- It is important that the section ends here - otherwise the reader might
             presume that this subsection was important for subsequent subsections and
             would be more reluctant to skip it. Additionally the bigger font of the
             sections makes them easier to find - which makes them an easier target
             for the end of a skip. -->
    </Section>

    <!--TODO since this section is a skipping target, it should have a more evocative
         name that stops people from infinite skipping.-->
    <Section Label="Introduction_AccessVerticesFaces"><Heading>Playing with vertices and faces.</Heading>
        After having learned how to construct a simplicial surface by
        SimplicialSurfaceByVerticesInFaces, we can use the indexing of vertices
        and faces to get more detailed information about the surface. We will
        use the example from section
        <Ref Sect="Introduction_EasyConstruction"/>:
        <Alt Only="TikZ">
            {
                \def\vertexLabels{1}
                \def\faceLabels{1}
                \input{Image_ThreeTrianglesInLine.tex}
            }
        </Alt>
<Example>
gap&gt; surf := SimplicialSurfaceByVerticesInFaces( 5, 3, [[1,2,3],[2,3,4],[2,4,5]] );;
</Example>
        It is easy to reclaim the indexial information.
<Example>
gap&gt; Vertices(surf);
[ 1, 2, 3, 4, 5 ]
gap&gt; Faces(surf);
[ 1, 2, 3 ]
gap&gt; VerticesOfFaces(surf);
[ [ 1, 2, 3 ], [ 2, 3, 4 ], [ 2, 4, 5 ] ]
</Example>
        By using the index-structure we can distinguish vertices that have a 
        different number of incident faces.
<Example>
gap&gt; UnsortedDegrees(surf);
[ 1, 3, 2, 2, 1]
</Example>
        The first entry of this list counts the number of faces that are
        incident to the vertex 1 (in general the i-th entry counts those
        for the vertex i).<P/>
        In this case it is apparent that the second vertex is incident to three
        different faces and unique with that property. To distinguish vertices
        1 and 5 (that are incident to one face each), we need to know which
        faces they are incident to.
<Example>
gap&gt; FacesOfVertices(surf);
[ [ 1 ], [ 1, 2, 3 ], [ 1, 2 ], [ 2, 3 ], [ 3 ] ]
</Example>
        So the first vertex is incident to the face 1 and the fifth vertex is
        incident to face 3. We can also see that the third vertex is incident
        to the faces 1 and 2.<P/>
        An additional advantage of the indexial information is that we can
        determine a concrete global orientation if the surface is orientable.
<Example>
gap&gt; GlobalOrientation(surf);
[ (1,2,3), (2,4,3), (2,5,4) ]
</Example>
        If we would rather work with lists instead of permutations (instead
        of the permutation (2,4,3) we would have the list [2,4,3]) we can use
<Example>
gap&gt; GlobalOrientationByVerticesAsList(surf);
[ [ 1, 2, 3 ], [ 2, 4, 3 ], [ 2, 5, 4 ] ]
</Example>
    </Section>

    <Section Label="Introduction_EdgeNumbering"><Heading>Adding edge numbering</Heading>
        Up until now we did not care about specific edges because they were
        not important for the construction of our examples so far. But let us
        assume that we want to know which edges are incident to exactly two
        faces in our example from before.
        <Alt Only="TikZ">
            {
                \def\vertexLabels{1}
                \def\faceLabels{1}
                \input{Image_ThreeTrianglesInLine.tex}
            }
        </Alt>
<Example>
gap&gt; surf := SimplicialSurfaceByVerticesInFaces( 5, 3, [[1,2,3],[2,3,4],[2,4,5]] );;
</Example>
        We can see the edges by calling
<Example>
gap&gt; Edges(surf);
[ 1, 2, 3, 4, 5, 6, 7 ]
</Example>
        but this does not tell us where they are. For that we may use
<Example>
gap&gt; VerticesOfEdges(surf);
[ [ 1, 2 ], [ 1, 3 ], [ 2, 3 ], [ 2, 4 ], [ 2, 5 ], [ 3, 4 ], [ 4, 5 ] ]
</Example>
        As before, the first entry of this list contains the vertices of the
        first edge. In our example the edge with number 1 is incident to the
        vertices 1 and 2. We can update our picture:<!--TODO do so-->
        <Alt Only="TikZ">
            {
                \def\vertexLabels{1}
                \def\edgeLabels{1}
                \def\faceLabels{1}
                \input{Image_ThreeTrianglesInLine.tex}
            }
        </Alt>
        If we now want to know which edges are incident to exactly two
        faces, we only have to check
<Example>
gap&gt; FacesOfEdges(surf);
[ [ 1 ], [ 1 ], [ 1, 2 ], [ 2, 3 ], [ 3 ], [ 2 ], [ 3 ] ]
</Example>
        The positions with lists of two elements are the interesting
        edges. We can compute the easily by
<Example>
gap&gt; Filtered( Edges(surf), e -> Size(FacesOfEdges(surf)[e]) = 2 );
[ 3, 4 ]
</Example>
    </Section>

</Chapter>

