<?xml version="1.0" encoding="UTF-8"?>

<!-- This chapter showcases the power of the SimplicialSurface-package
     by giving examples of actual code that (could) stand in the package.
     The aim is to help novices learn the ropes of the package -->

<!-- As usual there is the question of the ordering. To make look-ups easily
     possible there will be a section for each example method. We will then
     order these sections in a way that increases the complexity (but leaves
     the individual sections independently readable).

     This leaves the ordering problem within each section. Here we have 
     different preferences. The main difference is whether the code gets
     developed in the section or just handed down.
     -> If the code is developed, the section should start with a rough idea
        of the method that gets improved over time (when border cases pop up).
        It would discuss the maximal applicability of the method, start with
        a naive implementation and improve this over time. It would end with
        the complete code.
        Pro: Makes good explanation possible.
        Pro: Teaches people how to code.
        Con: Harder to find concrete explanation for something.
        Con: Takes longer to answer question "How is this done?"
     -> If the code is handed down, the completed version is shown and then
        explained.
        Pro: Very efficient in imparting the relevant information (code)
        Pro: Easy to find explanation of a certain part in the code
        Con: Hard to reproduce
        Con: Harder to casually read
     
     Unfortunately for us, both of these users can be expected. While this
     chapter seems to be tailored to the second kind (as it is mostly used as
     a reference) this is only true to the first degree. After having looked
     it up (or found it by a link in an early chapter) the reader is either
     immediately satisfied (if they just wanted to know a certain method name)
     or wants a deeper explanation (if they don't understand how to produce
     similar code - a common reason for searching out these examples).

     That would suggest frontloading the code and then explaining the
     development of it step by step. This would satisfy both extremes, but
     would complicate matters for a middle preference that just wants a quick
     explanation of the code to move on (and does not want to go onto a big
     tangent about code development).
     But explaining the complete code first and only then going into 
     development would turn off readers who need to see the development.
     This could be ameliorated by not giving the optimized full code but only
     a naive code that is easy to understand. This would frustrate the expert
     readers though since they need more than the naive approach.

     If one were to start with links at the start of each section that give
     a rough table of contents ("if you want to see the complete code, click 
     here"). We could make two standard subsections (possible since we don't
     use ManSections in this chapter anyway), namely "Naive implementation"
     and "Expert implementation" that start with the corresponding code.
     This would give the following structure:
     -> Start with the links
     -> Explain what the method should do, understand its usage
     -> Subsection Naive Code
        -> Start with code
        -> Develop the naive code
     -> Subsection Expert Code
        -> Start with code
        -> Develop expert code from naive code
     This is good for newbies and people that want to understand the naive
     code. It is still bad for people that want to understand the expert code
     as they have to jump around more.
     We could end each of the subsections with the corresponding code (as 
     a summary). This would allow the expert users to look slightly above to 
     see the naive code and compare. This goes on the cost of space, of course..
     -->
<!-- TODO this whole discussion seems like overkill - how does the code look like? If it is simple enough we don't even have to disuss this... -->


<Chapter Label="ExampleImplementations"><Heading>Example Implementations</Heading>
    This chapter contains implementation examples of some methods from the
    <K>SimplicialSurface</K>-package. Every section discusses a method in the
    following way:
    <Enum>
        <Item>Short explanation of the method</Item>
        <Item>Presentation of the code</Item>
        <Item>Development of the code</Item>
    </Enum>

    <Section Label="Example_VertexCounter"><Heading>VertexCounter</Heading>
        The method <K>VertexCounter</K> (<Ref Subsect="VertexCounter"/>)
        counts the edge--degrees of all vertices and collects those in a list:
        The entry at position
        <A>pos</A> counts the number of vertices with exactly <A>pos</A> 
        incident edges.
        <Par/>
        This could be implemented like this:
<Example>
gap&gt; VertexCounter_custom := function( complex )
&gt;     local edgeDegrees, colDegrees, count, pair;
&gt; 
&gt;     edgeDegrees := List( EdgesOfVertices(complex), Size );
&gt;     colDegrees := Collected( Compacted( edgeDegrees ) );
&gt; 
&gt;     count := [];
&gt;     for pair in colDegrees do
&gt;         count[pair[1]] := pair[2];
&gt;     od;
&gt; 
&gt;     return count;
&gt; end;;
</Example>
        We illustrate this on the example of a pyramid with square base.
        <Alt Only="TikZ">
            \input{Image_SquarePyramid.tex}
        </Alt>
<Example>
gap&gt; pyr := PolygonalSurfaceByVerticesInFaces( 
&gt;            [ [3,4,5,6], [1,3,4], [1,4,5], [1,5,6], [1,6,3] ]);;
gap&gt; VertexCounter( pyr );
[ , , 4, 1 ]
gap&gt; VertexCounter_custom( pyr );
[ , , 4, 1 ]
</Example>
        How do we arrive at this code? 

        First of all we have to find the relevant information. We want to
        count how many edges are incident to a vertex. Therefore we use
        the method <K>EdgesOfVertices</K> (<Ref Subsect="EdgesOfVertices"/>) 
        that gives us exactly this 
        information. Since we only want to know the <E>number</E> of edges,
        we apply the method <K>Size</K> to every component.
<Example>
gap&gt; edgeDegrees := List( EdgesOfVertices(pyr), Size );
[ 4, , 3, 3, 3, 3 ]
</Example>
        Alternatively we could have used the specialized method
        <K>EdgeDegreesOfVertices</K> (<Ref Subsect="EdgeDegreesOfVertices"/>) directly.
<Example>
gap&gt; EdgeDegreesOfVertices( pyr );
[ 4, , 3, 3, 3, 3 ]
</Example>
        Now we need to count how often each entry appears. This can be done
        by a loop but we will use the &GAP;-function <K>Collected</K> instead.
        Unfortunately it only works for lists without holes:
<Example>
gap&gt; Collected( edgeDegrees );
Error, List Element: &lt;list&gt;[2] must have an assigned value
</Example>
        If we want to program with this package, we have to expect
        holes. In this case it is sufficient to remove all holes
        with the  &GAP;-function <K>Compacted</K>.
<Example>
gap&gt; Compacted( edgeDegrees );
[ 4, 3, 3, 3, 3 ]
gap&gt; colDegrees := Collected( Compacted( edgeDegrees ) );
[ [ 3, 4 ], [ 4, 1 ] ]
</Example>
        From this list we can read of the result: There are four vertices
        with edge degree 3 and one vertex of edge degree 4. To translate it
        into a list, we can use a for-loop.
<Example>
gap&gt;  count := [];;
gap&gt;  for pair in colDegrees do
&gt;         count[pair[1]] := pair[2];
&gt;     od;
gap&gt;  count;
[ , , 4, 1 ]
</Example>
    </Section>

    <Section Label="ExampleStronglyConnectedComponent">
            <Heading>StronglyConnectedComponentOfFace</Heading>
            The method <K>StronglyConnectedComponentOfFace</K> 
            (<Ref Subsect="StronglyConnectedComponents"/>) finds all faces
            that are connected to a given face by edge-face-paths and returns
            the polygonal complex consisting of these faces.
            <Par/>
            This could be implemented like this:
<Example>
gap&gt; StrongComponent_custom := function( complex, face )
&gt;        local component, f, edge, newFace;
&gt;  
&gt;        component := [ face ];
&gt;        for f in component do
&gt;            for edge in EdgesOfFace(complex, f) do
&gt;                newFace := NeighbourFaceByEdge( complex, f, edge );
&gt;                if not newFace in component then
&gt;                    Add(component, newFace);
&gt;                fi;
&gt;            od;
&gt;        od;
&gt; 
&gt;        return SubcomplexByFaces( complex, component );
&gt;    end;;
</Example>
            We illustrate this with an octahedron (<Ref Subsect="Octahedron"/>):
            <Alt Only="TikZ">
                \input{_TIKZ_Octahedron_constructor.tex}
            </Alt>
<Example>
gap&gt; octa := Octahedron();;
gap&gt; StrongComponent_custom(octa,7) = StronglyConnectedComponentOfFace(octa,7);
true
</Example>
            To develop this code we first have to find an algorithm to 
            compute the strongly connected component of an face. We begin with
            the starting face (for example 7) and add all faces to the strong
            component that are adjacent to it (so 1, 5 and 6). Then we add
            the neighbours of those faces (and so on). We will end up with all
            faces of the strongly connected component of 7.

            The initialization of this algorithm is easy.
<Example>
gap&gt; component := [ 7 ];
[ 7 ]
</Example>
            For each edge of this face there is a neighbour. Therefore we need
            the edges of this face.
<Example>
gap&gt; EdgesOfFace( octa, 7 );
[ 2, 3, 8 ]
</Example>
            The neighbours can be computed by calling the method
            <K>NeighbourFaceByEdge</K> (<Ref Subsect="NeighbourFaceByEdge"/>).
<Example>
gap&gt; newFace := NeighbourFaceByEdge( octa, 7, 2 );
1
</Example>
            If this face is not already accounted for, we have to add it
            to our component.
<Log>
gap&gt; if not newFace in component then
&gt;        Add( component, newFace );
&gt;    fi;
</Log>
            To check all neighbours, we loop over the incident edges:
<Log>
gap&gt; for edge in EdgesOfFace(octa, 7) do
&gt;        newFace := NeighbourFaceByEdge( octa, 7, edge );
&gt;        if not newFace in component then
&gt;            Add( component, newFace );
&gt;        fi;
&gt;    od;
</Log>
            Finally we have to loop over all faces in the component. At this
            point we use a feature of &GAP;: We can loop over a list that is
            changed during the loop. So our algorithm can simply be written as
<Example>
gap&gt; for f in component do
&gt;        for edge in EdgesOfFace(octa, f) do
&gt;            newFace := NeighbourFaceByEdge( octa, f, edge );
&gt;            if not newFace in component then
&gt;                Add(component, newFace);
&gt;            fi;
&gt;        od;
&gt;    od;
gap&gt; component;
[ 7, 1, 5, 6, 3, 4, 8, 2 ]
</Example>
            Now we have computed all faces of the strongly connected 
            component of our starting face. To make a polygonal complex
            out of it, we use the method <K>SubcomplexByFaces</K> that returns
            the induced subcomplex of a given list of faces.<!--TODO reference-->
<Example>
gap&gt; SubcomplexByFaces( octa, component ) = octa;
true
</Example>
    </Section>

</Chapter>

