<?xml version="1.0" encoding="UTF-8"?>

<!-- This chapter is technical but very important for the rest of the package.
     Especially the definition of polygonal complex is essential (since most
     operations refer to it in one way or another). Therefore it has to explained
     quite early (for people who read a manual in order).
     Since we don't want to bore readers, we aim for an engagingly written
     chapter with many pictures to easily visualize what is going on. -->
<Chapter Label="PolygonalStructures"><Heading>Polygonal Structures</Heading>
    Although we are mostly interested in surfaces, the process of folding 
    naturally leads us to more general structures. Therefore, the most general 
    structure that we consider in this package is a polygonal complex (a 
    generalisation of simplicial surfaces and complexes).
    <Par/>
    <E>Polygonal Complexes</E> are structures that are build from polygons 
    (for the exact
    definition, see section <Ref Sect="PolygonalStructures_complex"/>), like
    <Alt Only="TikZ">
        \input{Image_ManyExamples.tex}
    </Alt>
    Since we are especially interested in surfaces we need a way to recognize
    them. For technical reasons we split this process into two separate steps,
    with the ramified polygonal surfaces as the intermediate structure between
    polygonal complexes and polygonal surfaces.
    <Par/>
    In many cases the definitions and algorithms simplify if we only consider
    triangles instead of general polygons. For this reason we also have equivalents
    of these structures that are only build from triangles. We can summarize
    the relationships graphically (higher means more general):
    <!-- This is one of the few exceptions to our rule of not explaining the
         manual structure explicitly. At this point our interests are two-fold:
         1) We want to give more experienced readers a quick answer to 
            questions of the form "Which of these concepts is more general?" or 
            "What was the intermediate form called?"
         2) We don't want to burden new readers with the whole information
            complex immediately.
         These interests are standing in obvious conflict. Our method of 
         resolution is to explain a simplified model of the polygonal 
         hierarchy. Together with this simplification the diagram can be read
         in context and becomes easier to process.

         At the same time the hierarchy is a natural structure for this chapter
         since PolygonalSurfaces rely on both the steps from PolygonalComplexes
         and from RamifiedPolygonalSurfaces. Since the hierarchy had to be
         explained anyway, this explanation does not count heavily against our
         rule. -->
    <Alt Only="TikZ">
        \begin{tikzpicture}[
            % Define the hyperlink structure. This code was adapted from
            % https://tex.stackexchange.com/questions/36109/making-tikz-nodes-hyperlinkable
            hyperlink node/.style={
                alias=sourcenode,
                append after command={
                    let \p1 = (sourcenode.north west),
                        \p2=(sourcenode.south east),
                        \n1={\x2-\x1},
                        \n2={\y1-\y2} in
                    node [inner sep=0pt, outer sep=0pt,anchor=north west,at=(\p1)] 
                        {\hyperref[#1]{\XeTeXLinkBox{\phantom{\rule{\n1}{\n2}}}}}
                    %xelatex needs \XeTeXLinkBox, won't create a link unless it
                    %finds text --- rules don't work without \XeTeXLinkBox.
                    %Still builds correctly with pdflatex and lualatex
                }
            },
            % The style for the boxes
            box/.style={
                rectangle,          % The shape
                inner sep=2ex,      % The size
                draw=black,         % The boundary
                minimum width=5cm   % The minimal width (to make all nodes equal)
            }
        ]
            % Make hyperlink locally invisible
            \hypersetup{hidelinks}

            % Define the nodes
            \node (PC) [box, hyperlink node=PolygonalStructures_complex] 
                    {\textbf{Polygonal Complex}};
            \node (TC) [box, right=of PC, xshift=2cm, yshift=-1cm,
                hyperlink node=PolygonalStructures_complex] {Triangular Complex};
	
            \node (RPS) [box, below=of PC, hyperlink node=PolygonalStructures_ramified] 
                    {\textit{Ramified Polygonal Surface}};
            \node (RSS) [box, below=of TC, hyperlink node=PolygonalStructures_ramified] 
                    {\textit{Ramified Simplicial Surface}};
	
            \node (PS) [box, below=of RPS, hyperlink node=PolygonalStructures_surface] 
                    {Polygonal Surface};
            \node (SS) [box, below=of RSS, hyperlink node=PolygonalStructures_surface] 
                    {\textbf{Simplicial Surface}};
	
	    \draw (PC.east) -- (TC.west);
	    \draw (RPS.east) -- (RSS.west);
	    \draw (PS.east) -- (SS.west);
	
	    \draw (PC) -- (RPS) -- (PS);
	    \draw (TC) -- (RSS) -- (SS);
        \end{tikzpicture}
    </Alt>
    <!-- TODO this only works in LaTeX - how are the references done in HTML in comparison? -->
    <!-- TODO this can be done in Text as well-->

    <Section Label="PolygonalStructures_complex">
        <Heading>Polygonal and Triangular Complexes</Heading>
        
        A polygonal complex is defined by a two-dimensional incidence geometry
        that fulfills some regularity conditions (the complete definition will
        be given at the end of this section in definition 
        <Ref Subsect="Def_PolygonalComplex"/>). We will exemplify this by 
        the following surface.
        <Alt Only="TikZ">
            \input{Image_StarOfStarExample.tex}
        </Alt>
        In a two-dimensional incidence geometry we have a set <M>V</M> of
        vertices, a set <M>E</M> of edges and a set <M>F</M> of faces. If we label
        our picture like this,
        <!-- The choice to make the labelling disjoint and non-consecutive is
             deliberate: It shows that the labelling may contain holes and it
             makes it easier to distinguish between vertices and edges.
             Downside: It might give the impression that these numbers have to
             be disjoint. While this is a serious concern, we feel that it is
             counteracted by enough contrary examples in the manual. -->
        <Alt Only="TikZ">
            {
                \def\allLabels{1}
                \input{Image_StarOfStarExample.tex}
            }
        </Alt>
        we have the sets
        <Par/>
        <M>V = \{2, 3, 5, 7, 11\}</M>
        <Par/>
        <M>E = \{6, 8, 9, 10, 12, 13\}</M>
        <Par/>
        <M>F = \{I, IV\}</M>.
        <Par/>
        These sets can't encode the surface on their own. We also need the 
        relations between vertices, edges and faces. For that we define a 
        transitive relation in the union of <M>V \times E</M>, 
        <M>V \times F</M> and <M>E \times F</M>, where <M>(a,b)</M> is in the 
        relation if and only if <M>a</M> is incident to <M>b</M>.
        Since the relation is transitive, it is sufficient to specify the 
        tuples in <M>V \times E</M> and <M>E \times F</M>. In our example the 
        relation would be generated by
        <Par/>
        <M>\{ (2,6), (2,8), (3,8), (3,9), (3,10), (5,10), (5,12), (7,12), 
            (7,13), (11,6), (11,9), (11,13)\}</M>
        <Par/>
        and
        <Par/>
        <M>\{ (6,I), (8,I), (9,I), (9,IV), (10,IV), (12,IV), (13,IV) \}</M>.
        <Par/>
        <!-- TODO add "subset VxE" to those? Is that possible? -->


        Instead of a general incidence relation we only want to consider
        those relations that have similar properties to our example. For
        example, every edge should consist of exactly two vertices (more
        formally, for every edge there should be exactly two vertices that
        are incident to it).
        <Alt Only="TikZ">
            \begin{tikzpicture}
                \coordinate[label={[vertex]left:2}] (A) at (0,0);
                \coordinate[label={[vertex]right:3}] (B) at (3,1);

                \draw (A) -- (B);
                \drawEdge{A}{B}{8}

                \foreach \p in {A,B}
                    \fill[vertex] (\p) circle (\vSize);
            \end{tikzpicture}
        </Alt>
        If we try to generalize this condition to the faces we encounter
        some difficulties. For example, if we only enforce that each face
        has exactly three edges and three vertices, it would be possible
        that two of those edges share all of their vertices. Therefore
        even the case of triangles is quite complicated.
        <Alt Only="TikZ">
            \begin{tikzpicture}
                \def\xs{2}
                \coordinate[label={[vertex]left:1}] (A) at (0,0);
                \coordinate[label={[vertex]above:2}] (B) at (\xs,1);
                \coordinate[label={[vertex]right:3}] (C) at (2*\xs,0);

                \draw (A) to [bend left=30] (B);
                \draw (A) to [bend right=30] (B);
                \draw (B) -- (C);

                \foreach \p in {A,B,C}
                    \fill[vertex] (\p) circle (\vSize);
            \end{tikzpicture}
        </Alt>
        We will solve this problem by imposing a cyclic ordering on the
        vertices and edges that are incident to each face, such that those
        are compatible with the incidence structure. Since this definition
        is equally valid for all possible faces (not just triangles), we
        formally define:
        <Par/>

        <List>
            <Item><#Include Label="PolygonalComplex_Face"></Item>
        </List>

        <Alt Only="TikZ">
            {
                \def\abstractLabels{1}
                \input{Image_PentagonCyclicOrder.tex}
            }
        </Alt>

        With these conditions we have guaranteed that our edges and faces
        behave as in our previous example. But they still allow the possibility
        of an incidence relation where we have vertices but no faces. Since
        we want to exclude singular cases like this from our considerations, we
        require that every vertex is incident to at least one edge and that
        every edge is incident to at least one face.
        <Par/>

        <Subsection Label="Def_PolygonalComplex">
            <Heading>Definition (polygonal complex and triangular complex)</Heading>
            <#Include Label="PolygonalComplex_Definition">
        </Subsection>

        It is now easy to verify
        that the examples in the picture
        <Alt Only="TikZ">
            \input{Image_ManyExamples.tex}
        </Alt>
        are all polygonal complexes.
        <Par/>


        <ManSection>
            <Filt Name="IsPolygonalComplex" Arg="object" Type="category"
                Comm="Checks whether the given object is a polygonal complex"/>
            <Returns>true or false</Returns>
            <Description>
                Checks whether <A>object</A> is a polygonal complex. A polygonal
                complex can be informally described as a structure that is
                constructed from polygons.
                <Par/>
                More formally (for a more extensive explanation see section 
                <Ref Sect="PolygonalStructures_complex"/>) a polygonal complex 
                is a two-dimensional incidence geometry of vertices, edges and 
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                </Enum>
            </Description>
        </ManSection>

        <ManSection>
            <Prop Name="IsTriangularComplex" Arg="object"
                Comm="Checks whether the given object is a triangular complex"/>
            <Returns>true or false</Returns>
            <Description>
                Checks whether <A>object</A> is a triangular complex (a 
                polygonal complex with triangular faces). A triangular complex
                can be informally described as a structure that is constructed
                from triangles.
                <Par/>
                More formally (for a more extensive explanation see section
                <Ref Sect="PolygonalStructures_complex"/>) a triangular complex
                is a two-dimensional incidence geometry of vertices, edges and
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="TriangularComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                </Enum>
            </Description>
        </ManSection>

    </Section>

    <Section Label="PolygonalStructures_ramified">
        <Heading>Ramified polygonal and simplicial surfaces</Heading>
        Ramified polygonal (simplicial) surfaces are an intermediate concept
        between polygonal (triangular) complexes 
        (<Ref Sect="PolygonalStructures_complex"/>) and polygonal (simplicial)
        surfaces (<Ref Sect="PolygonalStructures_surface"/>).
        <Par/>
        A <E>ramified polygonal surface</E> is a polygonal complex where every
        edge is incident to at most two faces. If every face is a triangle, we
        call it a <E>ramified simplicial surface</E>.
        <Par/>
        The stereotypical polygonal complex that is <E>not</E> a ramified
        polygonal surface consists of three triangles that share a common edge.
        <Alt Only="TikZ">
            \begin{tikzpicture}
                \input{Image_ThreeBranchingTriangles.tex}
            \end{tikzpicture}
        </Alt>

        A stereotypical example of a ramified polygonal surface would be two 
        tetrahedrons that have one vertex in common.
        <Alt Only="TikZ">
            \begin{tikzpicture}
                \input{Image_TwoJoinedTetrahedrons.tex}
            \end{tikzpicture}
        </Alt>

        Although these structures are not true surfaces, in many applications 
        they behave very similar (for example for questions of orientability).
        <!-- TODO link to orientability chapter or give better example with link-->
 
        <ManSection>
            <Prop Name="IsRamifiedPolygonalSurface" Arg="object" 
                Comm="Checks whether the given object is a ramified polygonal surface."/>
            <Returns>true or false</Returns>
            <Description>
                Checks whether <A>object</A> is a ramified polygonal surface (a
                polygonal complex where every edge is incident to at most two faces).
                <Par/>
                More formally (for a more extensive explanation see sections
                <Ref Sect="PolygonalStructures_complex"/> and
                <Ref Sect="PolygonalStructures_ramified"/>) a ramified polygonal
                surface is a two-dimensional incidence geometry of vertices, edges and 
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                    <Item>Every edge is incident to at most two faces.</Item>
                </Enum>
            </Description>
        </ManSection>

        <ManSection>
            <Prop Name="IsRamifiedSimplicialSurface" Arg="object"
                Comm="Checks whether the given object is a ramified simplicial surface"/>
            <Returns>true or false</Returns>
            <Description>
                Checks whether <A>object</A> is a ramified simplicial surface (a 
                polygonal complex with triangular faces where every edge is incident
                to at most two faces).
                <Par/>
                More formally (for a more extensive explanation see sections
                <Ref Sect="PolygonalStructures_complex"/> and
                <Ref Sect="PolygonalStructures_ramified"/>) a ramified simplicial surface
                is a two-dimensional incidence geometry of vertices, edges and
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="TriangularComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                    <Item>Every edge is incident to at most two faces.</Item>
                </Enum>
            </Description>
        </ManSection>
    </Section>


    <Section Label="PolygonalStructures_surface">
        <Heading>Polygonal and simplicial surfaces</Heading>
        Polygonal (simplicial) surfaces are polygonal (triangular) complexes
        that behave like surfaces (two-dimensional manifolds with boundary). 
        For example, they arise from the discretisation of a continuous 
        surface.
        <Par/>
        There are two properties that distinguish polygonal/simplicial surfaces
        from polygonal/triangular complexes:
        <Enum>
            <Item> Every edge behaves "like a surface", i.e. it is incident to
                at most two faces. This excludes cases like three triangles
                that share one edge.
                <Alt Only="TikZ">
                    \begin{tikzpicture}
                        \input{Image_ThreeBranchingTriangles.tex}
                    \end{tikzpicture}
                </Alt>
            </Item>
            <Item> Every vertex behaves "like a surface". We will formalize this
                below but the aim of this condition is to exclude cases like 
                those:
                <Alt Only="TikZ">
                    \input{Image_RamifiedExamples.tex}
                </Alt>
            </Item>
        </Enum>
        If only the first condition is fulfilled, we talk about <E>ramified
        polygonal/simplicial surfaces</E> 
        (<Ref Sect="PolygonalStructures_ramified"/>).

        We now proceed to formalize the second condition. Intuitively we want to
        distinguish between the different coloured faces in these examples:
        <Alt Only="TikZ">
            {
                \def\differentColors{1}
                \input{Image_RamifiedExamples.tex}
            }
        </Alt>
        They can be distinguished by the fact that faces of the same colour are
        connected by edges that are incident to the given vertex. More formally:
        <Subsection Label="Definition_EdgeFacePath_Vertex">
            <Heading>Definition (Edge-Face-Path around a vertex)</Heading>
                <#Include Label="EdgeFacePath_Definition">
                <Alt Only="Tikz">
                    \input{Image_EdgeFacePath.tex}
                </Alt>
            </Subsection>
            With this definition in mind we can explicate the second property:
            <List>
                <Item><#Include Label="PolygonalComplex_Paths"></Item>
            </List>
            For a general ramified polygonal surface we can't expect to get
            exactly one edge-face-path. In our examples above all incident edges
            and faces could be represented by two edge-face-paths.

            In general we can always find a set of edge-face-paths of a vertex
            such that all edges and faces incident to that vertex lie in exactly
            one of those paths. This is called the <E>edge-face-path partition</E>
            of the vertex.

            <ManSection>
                <Attr Name="EdgeFacePathPartitionsOfVertices" Arg="ramSurf"
                    Comm="Return edge-face-path partitions of all vertices"/>
                <Returns>A list of edge-face-path partitions (who are lists 
                    themselves)</Returns>
                <Oper Name="EdgeFacePathPartitionOfVertex" 
                    Arg="ramSurf, vertex"
                    Comm="Return edge-face-paths of one vertex"/>
                <Oper Name="EdgeFacePathPartitionOfVertexNC" 
                    Arg="ramSurf, vertex"/>
                <Returns>The edge-face-path partition of a vertex (as list)
                    </Returns>
                <Description>
                    For each vertex <M>V</M> the edge-face-path partition of 
                    this vertex is a list of edge-face-paths of this vertex 
                    (see definition 
                    <Ref Subsect="Definition_EdgeFacePath_Vertex"/>) such that
                    all edges and faces that are incident to <M>V</M> lie in
                    exactly one of those edge-face-paths.
                    <Par/>
                    Each edge-face-path is given as a list
                    <M>[e_1,f_1,e_2,f_2,\ldots, e_n, f_n]</M> (for a closed
                    path) or <M>[e_1,f_1,e_2,\ldots, e_n,f_n,e_{{n+1}}]</M>
                    (for an open path).
                    <Par/>
                    The attribute <K>EdgeFacePathPartitionsOfVertices</K>
                    returns a list such that the entry <M>V</M> holds the
                    edge-face-path partition of the vertex <M>V</M>. All
                    other entries of the list are unbounded.
                    <!--TODO make a good example-->
                </Description>
            </ManSection>
  
            <ManSection>
                <Prop Name="IsPolygonalSurface" Arg="object"
                    Comm="Checks whether the given object is a polygonal surface."/>
                <Returns>true or false</Returns>
                <Description>
                    Checks whether <A>object</A> is a polygonal surface. Informally
                    a polygonal surface is a surface (with boundary) that is build
                    only from polygons.
                    <Par/>
                    More formally (for more details and examples see sections
                    <Ref Sect="PolygonalStructures_complex"/>,
                    <Ref Sect="PolygonalStructures_ramified"/> and
                    <Ref Sect="PolygonalStructures_surface"/>) a polygonal surface
                    is a two-dimensional incidence geometry of vertices, edges and
                    faces such that the following conditions hold:
                    <Enum>
                        <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                        <Item><#Include Label="PolygonalComplex_Face_simple"></Item>
                        <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                        <Item><#Include Label="PolygonalComplex_Ramified"></Item>
                        <Item><#Include Label="PolygonalComplex_Paths"></Item>
                    </Enum>
                </Description>
            </ManSection>

            <ManSection>
                <Prop Name="IsSimplicialSurface" Arg="object"
                    Comm="Checks whether the given object is a simplicial surface."/>
                <Returns>true or false</Returns>
                <Description>
                    Checks whether <A>object</A> is a simplicial surface. 
                    Informally a simplicial surface is a surface (with boundary)
                    that is build only from triangles.
                    <Par/>
                    More formally (for more details and examples see sections
                    <Ref Sect="PolygonalStructures_complex"/>,
                    <Ref Sect="PolygonalStructures_ramified"/> and
                    <Ref Sect="PolygonalStructures_surface"/>) a simplicial surface
                    is a two-dimensional incidence geometry of vertices, edges and
                    faces such that the following conditions hold:
                    <Enum>
                        <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                        <Item><#Include Label="TriangularComplex_Face_simple"></Item>
                        <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                        <Item><#Include Label="PolygonalComplex_Ramified"></Item>
                        <Item><#Include Label="PolygonalComplex_Paths"></Item>
                    </Enum>
                </Description>
            </ManSection>

    </Section>
                                    
</Chapter> 
