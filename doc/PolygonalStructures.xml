<?xml version="1.0" encoding="UTF-8"?>

<!-- TODO insert stuff about VEFComplex and BendPolygonalComplex -->

<!-- This chapter is technical but very important for the rest of the package.
     Especially the definition of polygonal complex is essential (since most
     operations refer to it in one way or another). Therefore it has to explained
     quite early (for people who read a manual in order).
     Since we don't want to bore readers, we aim for an engagingly written
     chapter with many pictures to easily visualize what is going on. -->
<Chapter Label="PolygonalStructures"><Heading>Polygonal Structures</Heading>
    This chapter presents the different ways in which surfaces are used
    in the <K>SimplicialSurfaces</K>-package. More accurately, it presents 
    structures
    that are build from polygons (note that these can be much more general
    than simplicial surfaces).
    <Par/>
    These structures are described as <K>VEFComplex</K>es.
    To model these structures there are two main options:
    <Enum>
        <Item>Description by incidence geometry. This leads to the concept
            of <K>PolygonalComplex</K> 
            (section <Ref Sect="PolygonalStructures_complex"/>). The 
            requirements for these
            to be surfaces are explained in section
            <Ref Sect="PolygonalStructures_surface"/>.</Item>
        <Item>If incidence geometry is not sufficient to describe a polygonal
            structure, additional information (a barycentric subdivision of 
            the faces) can be
            used. This leads to the concept of <K>BendPolygonalComplex</K>
            (section <Ref Sect="PolygonalStructures_bend"/>). 
            The weaker properties of the incidence geometry are
            explained in section <Ref Sect="PolygonalStructures_bendIncidence"/>.
            </Item>
    </Enum>
    <E>Polygonal Complexes</E> are structures that are build from polygons, 
    like shown in the following figure (for the precise definition, see
    section <Ref Sect="PolygonalStructures_complex"/>).
    <Alt Only="TikZ">
        \input{Image_ManyExamples.tex}
    </Alt>
    Surfaces are a special case of polygonal complexes and the package 
    provides functionality to determine whether a polygonal complex is
    a surface.
    <!-- There is no example of a bend polygonal complex here as it seems
         not necessary to burden the reader with it. If someone needs a
         more general structure, we have told him before where he might find
         it. For all others it would be a needless distraction. -->

    <Section Label="PolygonalStructures_complex">
        <Heading>Polygonal Complexes (pure incidence geometry)</Heading>
        A polygonal complex is defined by a two-dimensional incidence geometry
        that fulfills some regularity conditions (the complete definition will
        be given at the end of this section in definition 
        <Ref Subsect="Def_PolygonalComplex"/>). We will exemplify this by 
        the following surface.
        <Alt Only="TikZ">
            \begin{tikzpicture}[vertexStyle=nolabels, edgeStyle=nolabels, faceStyle=nolabels]
                \input{Image_StarOfStarExample.tex}
            \end{tikzpicture}
        </Alt>
        In a two-dimensional incidence geometry we have a set <M>V</M> of
        vertices, a set <M>E</M> of edges and a set <M>F</M> of faces. If we label
        our surface like this,
        <!-- The choice to make the labelling disjoint and non-consecutive is
             deliberate: It shows that the labelling may contain holes and it
             makes it easier to distinguish between vertices and edges.
             Downside: It might give the impression that these numbers have to
             be disjoint. While this is a serious concern, we feel that it is
             counteracted by enough contrary examples in the manual. -->
        <Alt Only="TikZ">
            \begin{tikzpicture}[vertexStyle, edgeStyle, faceStyle]
                \input{Image_StarOfStarExample.tex}
            \end{tikzpicture}
        </Alt>
        we have the sets
        <Par/>
        <M>V = \{2, 3, 5, 7, 11\}</M>
        <Par/>
        <M>E = \{6, 8, 9, 10, 12, 13\}</M>
        <Par/>
        <M>F = \{I, IV\}</M>.
        <Par/>
        These sets can't encode the surface on their own. The 
        relations between vertices, edges, and faces are also necessary. 
        Therefore we define a 
        transitive relation in the union of <M>V \times E</M>, 
        <M>V \times F</M>, and <M>E \times F</M>, where <M>(a,b)</M> is in the 
        relation if and only if <M>a</M> is incident to <M>b</M>.
        Since the relation is transitive, it is sufficient to specify the 
        tuples in <M>V \times E</M> and <M>E \times F</M>. In our example the 
        relation is generated by
        <Par/>
        <M>\{ (2,6), (2,8), (3,8), (3,9), (3,12), (5,6), (5,9), (5,10), (7,12), 
            (7,13), (11,10), (11,13)\}</M>
        <Par/>
        and
        <Par/>
        <M>\{ (6,I), (8,I), (9,I), (9,IV), (10,IV), (12,IV), (13,IV) \}</M>.
        <Par/>
        <!-- TODO add "subset VxE" to those? Is that possible? -->


        However, we do not permit arbitrary incidence relations but only
        those satisfying certain regularity conditions (like in our example).
        For
        example, every edge should consist of exactly two vertices (more
        formally, for every edge there should be exactly two vertices that
        are incident to it).
        <Alt Only="TikZ">
            \begin{tikzpicture}[vertexStyle, edgeStyle]
                \coordinate (A) at (0,0);
                \coordinate (B) at (3,1);

                \draw[edge] (A) -- (B);

                \foreach \p/\r/\n in {A/left/2, B/right/3}{
                    \vertexLabelR{\p}{\r}{\n}
                }
            \end{tikzpicture}
        </Alt>
        If we try to generalize this condition to the faces we encounter
        some difficulties. For example, if we only enforce that each face
        has exactly three edges and three vertices, it would be possible
        that two of those edges share all of their vertices. Therefore
        even the case of triangles is quite complicated.
        <Alt Only="TikZ">
            \begin{tikzpicture}[vertexStyle, edgeStyle=nolabels]
                \def\xs{2}
                \coordinate (A) at (0,0);
                \coordinate (B) at (\xs,1);
                \coordinate (C) at (2*\xs,0);

                \draw[edge] (A) to [bend left=30] (B);
                \draw[edge] (A) to [bend right=30] (B);
                \draw[edge] (B) -- (C);

                \foreach \p/\r/\n in {A/left/1, B/above/2, C/right/3}{
                    \vertexLabelR{\p}{\r}{\n}
                }
            \end{tikzpicture}
        </Alt>
        We will solve this problem by imposing a cyclic ordering on the
        vertices and edges that are incident to each face, such that those
        are compatible with the incidence structure. Since this definition
        is equally valid for all polygons (not just triangles), we
        formally define:
        <Par/>

        <List>
            <Item><#Include Label="PolygonalComplex_Face"></Item>
        </List>

        <Alt Only="TikZ">
            {
                \def\abstractLabels{1}
                \input{Image_PentagonCyclicOrder.tex}
            }
        </Alt>

        With these conditions we have guaranteed that all edges and faces
        behave as in our previous example. But they still allow the possibility
        of an incidence relation where we have vertices but no faces. Since
        we want to exclude singular cases like this from our considerations, we
        require that every vertex is incident to at least one edge and that
        every edge is incident to at least one face.
        <Par/>

        <Subsection Label="Def_PolygonalComplex">
            <Heading>Definition (polygonal complex)</Heading>
            <#Include Label="PolygonalComplex_Definition">
        </Subsection>

        It is now easy to verify
        that the examples in the picture
        <Alt Only="TikZ">
            \input{Image_ManyExamples.tex}
        </Alt>
        are all polygonal complexes.
        <Par/>


        <ManSection>
            <Prop Name="IsPolygonalComplex" Arg="object" Label="for IsObject"
                Comm="Checks whether the given object is a polygonal complex"/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> is a polygonal complex. A polygonal
                complex can be informally described as a structure that is
                constructed from polygons.
                <Par/>
                More formally (for a more extensive explanation see section 
                <Ref Sect="PolygonalStructures_complex"/>) a polygonal complex 
                is a two-dimensional incidence geometry of vertices, edges and 
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                </Enum>
            </Description>
        </ManSection>


    </Section>
<!-- TODO maybe talk about how to access this information with a link to the appropriate chapter? -->

    <Section Label="PolygonalStructures_bend">
        <Heading>Bend polygonal complexes and surfaces</Heading>
        A bend polygonal complex consists of a set of polygons whose vertices
        and edges can be arbitrarily identified. In particular a square whose
        opposite edges are identified (so it becomes a topological torus) can
        be described by a bend polygonal complex (but not by a polygonal 
        complex).
        <Alt Only="TikZ">
            \begin{tikzpicture}[vertexStyle, edgeStyle, faceStyle]
                \def\off{0.3}
                \def\len{2.2}

                \coordinate (A) at (0,0);
                \coordinate (B) at (\len,0);
                \coordinate (D) at (0,\len);
                \coordinate (C) at ($(B)+(D)$);

                \draw[edge,face] (A) -- (B) -- (C) -- (D) -- cycle;

                \foreach \p/\r in {A/left, B/right, C/right, D/left}{
                    \vertexLabelR{\p}{\r}{}
                }

                \draw[blue,thick,->] ($(A)+(-\off,0)$) -- ($(D)+(-\off,0)$);
                \draw[blue,thick,->] ($(B)+(\off,0)$) -- ($(C)+(\off,0)$);
                \draw[red,thick,->] ($(A)+(0,-\off)$) -- ($(B)+(0,-\off)$);
                \draw[red,thick,->] ($(D)+(0,\off)$) -- ($(C)+(0,\off)$);
            \end{tikzpicture}
        </Alt>
        This is achieved by storing additional information:
        <Enum>
            <Item><E>Local vertices</E>: For every polygon there is
                a local vertex for each corner (or angle).</Item>
            <Item><E>Local edges</E>: For every polygon there is a 
                local edge for each side. </Item>
            <Item><E>Half-edges</E>: A tuple of a vertex and an edge
                (incident to each other).</Item>
            <Item><E>Local flags</E>: A triple of a local vertex, a
                local edge and a face, all of them incident.</Item>
        </Enum>

        TODO explain, motivate, define bend polygonal complexes
        <ManSection>
            <Prop Name="IsBendPolygonalComplex" Arg="object" 
                Label="for IsObject"
                Comm="Checks whether the given object is a bend polygonal complex"/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> is a bend polygonal complex.
                
                TODO
            </Description>
        </ManSection>


        TODO explain how to work with it
    </Section>

    <Section Label="PolygonalStructures_bendIncidence">
        <Heading>Incidence geometry of bend polygonal complexes</Heading>
        In bend polygonal complexes (section 
        <Ref Sect="PolygonalStructures_bend"/>) the incidence geometry is 
        not as 
        constrained as in polygonal complexes (section
        <Ref Sect="PolygonalStructures_complex"/>).

        We denote this more liberal incidence geometry by 
        <E>VEF-complex</E> (VEF stands for vertex-edge-face).
        <Subsection Label="Def_VEFComplex">
            <Heading>Definition (VEF-complex)</Heading>
            A <E>VEF-complex</E> is a two-dimensional incidence geometry
            consisting of vertices, edges, and faces such that the
            following conditions hold:
            <#Include Label="VEFComplex_Properties"/>
        </Subsection>
            
        <ManSection>
            <Filt Name="IsVEFComplex" Arg="object" Type="category"
                Comm="Checks whether the given object is a VEF-complex."/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> is a VEF-complex. A 
                <E>VEF-complex</E>
                is a two-dimensional incidence geometry of vertices, edges, and
                faces such that the following conditions hold:
                <#Include Label="VEFComplex_Properties"/>
            </Description>
        </ManSection>

       

        <!-- TODO intuition, more information? -->
    </Section>

    <Section Label="PolygonalStructures_surface">
        <Heading>Polygonal and simplicial surfaces</Heading>
        Polygonal surfaces are polygonal complexes (compare section 
        <Ref Sect="PolygonalStructures_complex"/>)
        that behave like surfaces (two-dimensional manifolds with boundary). 
        For example, they arise from the discretisation of a continuous 
        surface. Simplicial surfaces are polygonal surfaces, where all
        polygons are triangles.
        <Par/>
        There are two properties that distinguish polygonal surfaces
        from polygonal complexes:
        <Enum>
            <Item> There are no ramified edges, i.e. every edge is incident to
                at most two faces. This excludes cases like three triangles
                that share one edge.
                <Alt Only="TikZ">
                    \begin{tikzpicture}[vertexStyle=nolabels, edgeStyle=nolabels, faceStyle=nolabels]
                        \input{Image_ThreeBranchingTriangles.tex}
                    \end{tikzpicture}
                </Alt>
            </Item>
            <Item> There are no ramified vertices. We will formalize this
                below but the aim of this condition is to exclude cases like 
                these:
                <Alt Only="TikZ">
                    \input{Image_RamifiedExamples.tex}
                </Alt>
            </Item>
        </Enum>
        If only the first condition is fulfilled, we have a <E>polygonal 
        complex without edge ramifications</E>.
         <ManSection Label="IsNotEdgeRamified">
            <Prop Name="IsNotEdgeRamified" Arg="complex" Label="for VEFComplex"
                Comm="Checks whether the given VEF-complex has no edge ramifications"/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether the VEF-complex <A>complex</A> has no edge
                ramifications.
                <P/>
                If <A>complex</A> is a polygonal complex, this means that
                every edge is incident to at most two faces.
                <P/>
                If <A>complex</A> is a bend polygonal complex, this means that
                every edge is incident to at most two local edges.
            </Description>
        </ManSection>

    
        We now proceed to formalize the second condition. Intuitively we want to
        distinguish between the different coloured faces in these examples:
        <Alt Only="TikZ">
            {
                \def\swapColors{1}
                \input{Image_RamifiedExamples.tex}
            }
        </Alt>
        They can be distinguished by the fact that faces of the same colour are
        connected by edges that are incident to the given vertex. More formally:
        <Subsection Label="Definition_Umbrella">
            <Heading>Definition (Umbrella-path around a vertex)</Heading>
                <#Include Label="Umbrella_Definition">
                <Alt Only="Tikz">
                    \input{Image_EdgeFacePath.tex}
                </Alt>
        </Subsection>
        With this definition in mind we can explicate the second property:
        <List>
            <Item><#Include Label="PolygonalComplex_Paths"></Item>
        </List>
        For generic polygonal complexes without edge ramifications we 
        can't expect to get
        exactly one umbrella. In our examples above all incident edges
        and faces could be represented by two umbrellas.
        
        <ManSection>
            <Prop Name="IsNotVertexRamified" Arg="complex"
                Comm="Checks whether the given VEF-complex has no vertex ramifications"/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether the VEF-complex <A>complex</A> has no vertex
                ramifications, i.e. that there is exactly one maximal umbrella
                for every vertex.
            </Description>
        </ManSection>



        In general, we can always find a set of umbrella of a vertex
        such that all edges and faces incident to that vertex lie in exactly
        one of those umbrellas. This is called the <E>umbrella partition</E>
        of the vertex (we will talk more about this topic in section
        <Ref Sect="Section_Access_OrderedVertexAccess"/>).
            
        <ManSection>
            <Prop Name="IsPolygonalSurface" Arg="object"
                Comm="Checks whether the given object is a polygonal surface."/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> (a polygonal complex) is a 
                polygonal surface. Informally
                a polygonal surface is a surface (with boundary) that is build
                only from polygons.
                <Par/>
                More formally (for more details and examples see sections
                <Ref Sect="PolygonalStructures_complex"/> and
                <Ref Sect="PolygonalStructures_surface"/>) a polygonal surface
                is a two-dimensional incidence geometry of vertices, edges, and
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                    <Item><#Include Label="PolygonalComplex_Ramified"></Item>
                    <Item><#Include Label="PolygonalComplex_Paths"></Item>
                </Enum>
            </Description>
        </ManSection>

        <ManSection>
            <Prop Name="IsSimplicialSurface" Arg="object"
                Comm="Checks whether the given object is a simplicial surface."/>
            <Returns><K>true</K> or <K>false</K></Returns>
            <Description>
                Checks whether <A>object</A> (a polygonal complex) is a 
                simplicial surface. 
                Informally a simplicial surface is a surface (with boundary)
                that is build only from triangles.
                <Par/>
                More formally (for more details and examples see sections
                <Ref Sect="PolygonalStructures_complex"/> and
                <Ref Sect="PolygonalStructures_surface"/>) a simplicial surface
                is a two-dimensional incidence geometry of vertices, edges, and
                faces such that the following conditions hold:
                <Enum>
                    <Item><#Include Label="PolygonalComplex_Edge_simple"></Item>
                    <Item><#Include Label="TriangularComplex_Face_simple"></Item>
                    <Item><#Include Label="PolygonalComplex_Incidence"></Item>
                    <Item><#Include Label="PolygonalComplex_Ramified"></Item>
                    <Item><#Include Label="PolygonalComplex_Paths"></Item>
                </Enum>
            </Description>
        </ManSection>

    </Section>

                                   
</Chapter> 
