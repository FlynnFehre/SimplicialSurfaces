##############################################################################
##
#W  wild_simplicial_surface.gd     SimplicialSurfaces     Alice Niemeyer
#W														Markus Baumeister
##
##
#Y  Copyright (C) 2016-2017, Alice Niemeyer, Markus Baumeister, 
#Y  Lehrstuhl B f√ºr Mathematik, RWTH Aachen
##
##  This file is free software, see license information at the end.
##
##  This file contains the declaration part for the wild simplicial surfaces
##	of the SimplicialSurfaces package.
##
##	TODO description of wild coloured simplicial surfaces
##
##  There are several ways of inputting a wild coloured simplicial surface.
##
##  A wild coloured simplicial surface is created by the function 
##  WildSimplicialSurface and is a GAP object. Simplicial surfaces can be 
##  obtained as follows:
##
##  1) Given a triple <gens> of involutions, the function
##     AllWildSimplicialSurfaces(gens)  computes  all wild coloured simplicial 
##     surfaces whose faces are the moved points of the generators and whose
##     edges are determined by the 2-cycles of the generators.
##  2) Input a surface by first listing the faces, 
##     then pairs of faces making up the edges, 
##     then the face-paths for  each vertex.  A face-path is simply
##     a list of the faces in the order in which they occur around a vertex.
##     The function WildSimplicialSurfacesFromFacePath takes this input
##     and returns all wild coloured simplicial surfaces matching the
##     description
##  3) Input a wild coloured surface by the following data structure, 
##     called the *generic-surface* data structure. The generic-surface
##     data structure is the most general data structure to describe
##     surfaces and is not restricted to wild coloured surfaces only.
##     The generic-surface data structure is a list of
##      the number of vertices, edges and faces
##      then pairs of vertices making up the edges, 
##      then triples of edges making up the faces, e.g.
##      ( |V|, |E|, |F|, [ [v1,v2],...],  [[e1,e2,e3],... ] )
##       here ei is a number, which is a position in the list of edges,
##       so that the list of vertex pairs can be indexed by ei to find
##       the two vertex numbers of edges ei.
##     
##
##
##    As GAP objects, certain general methods are installed for 
##    simplicial surface objects, such as Print and Display and "=".
##
##    The mr-type of a wild coloured simplicial surface <simpsurf>
##    can be determined with the function MrTypeOfWildSimplicialSurface.
##
##    As Simplicial surfaces are GAP objects, they cannot be 
##    accessed like records.
##
##    An action of a permutation on a simplicial surface is installed, 
##    allowing us to compute the orbits of a group acting on a set of
##    simplicial surfaces.
##    
##

##
##	Wild simplicial surfaces are simplicial surfaces that have additional
##	structure. Since not every simplicial surface admits a unique wild 
##	colouring, we don't define it as an attribute but rather as a separate
##	object (which is encoded as a category).
##
DeclareCategory( "IsWildSimplicialSurface", IsSimplicialSurface and
												 IsActualSurface );
InstallTrueMethod( IsSimplicialSurface, IsWildSimplicialSurface );
# TODO is this necessary? 80.8-1 and 78.7-1 seem to be in conflict here.


#############################################################################
##
##
#!	  @Section Constructors for wild simplicial surfaces
#!
#!
#!

##
##	This constructor takes the following information:
##
##	The list of involutions
##	The list MR-type
##	Optional: the list NamesOfFaces. If this is not given, the default
##				naming scheme is used
##
##	The NC-version doesn't check if the given information is consistent
##
DeclareOperation( "WildSimplicialSurface", [ IsList, IsList ] );
DeclareOperation( "WildSimplicialSurfaceNC", [ IsList, IsList ] );

##
##	This constructor takes the following information:
##
##	A simplicial surface which is an actual surface
##	The list of involutions
##
##	The NC-version doesn't check if the given information is consistent
##
DeclareOperation( "WildSimplicialSurface",
	[ IsSimplicialSurface and IsActualSurface, IsList ] );
DeclareOperation( "WildSimplicialSurfaceNC",
	[ IsSimplicialSurface and IsActualSurface, IsList ] );


#############################################################################
##
##
#!  @Section Attributes and properties of wild coloured simplicial surfaces
#!
#!

#! @Description
#! Returns the generators of the wild simplicial surface in a list.
#! @Arguments a wild simplicial surface
#! @Returns a dense list of permutations
DeclareAttribute( "Generators", IsWildSimplicialSurface );

#! @Description
#! Return the group that is generated by the generators of the wild simplicial
#! surface.
#! @Arguments a wild simplicial surface
#! @Returns a group
DeclareAttribute( "GeneratedGroup", IsWildSimplicialSurface );

#! @Description Given a wild coloured simplicial surface <simpsurf>, this
#!  function determines the vertex group of the simplicial surface.
#!  The vertex group of the simplicial surface <simpsurf> is defined to be
#!  $F_3/R$, where $F_3$ is the free group on three generators and $R$ is 
#!  the set of relations given by the vertex defining paths.
#!  @Returns finitely presented group.
DeclareAttribute( "VertexGroup", IsWildSimplicialSurface );

#!  @Description Given a wild coloured simplicial surface <simpsurf>, this
#!  function determines the mr-type of each of the edges of <simpsurf>.
#!  The mr-type of an edge of <simpsurf> is either "m" (for mirror) or 
#!  "r" (for rotation). It is defined as followed. 
#!  Suppose the edge  $e$ is incident to the vertices $v_1$ and 
#!  $v_2$ and to the two faces $F$ and $F'$. Let $x$ and $y$ be the edges of
#!  incident  incident to $F$ and $F'$ and to the same vertex $v_1$, say.
#!  Then $e$ is of type $m$ if both $x$ and $y$ have the same colour, and $e$
#!  is of type $r$ if $x$ and $y$ are different. As we assume the surface to
#!  be wild coloured, this means that the colours of the other edges incident 
#!  to $e$ and both faces $F$ and $F'$ are then also determined. As the # $'$
#!  edges of the simplicial surface are pairs of points, the mr-type of 
#!  the simplicial surface <simpsurf> can be encoded as a list of length 3. 
#!   Each of the
#!  entries is in turn  a list encoding the mr-type of all edges of a 
#!  certain colour. Suppose that mrtype[1] is the list encoding the mr-type
#!  of the red edges. Then mrtype[1][i] = 0 if the mr-type of the red edge
#!  incident to the vertex i is unknown, mrtype[1][i] = 1 if the mr-type of 
#!  the red edge incident to the vertex i is "m", and mrtype[1][i] = 2 if 
#!  the mr-type of the red edge incident to the vertex i is "r". 
#!  @Returns a list of three lists, each of which contains the 
#!  entries 0, 1 or 2.
#!  @Arguments <simpsurf>, a simplicial surface object as created 
#!  by WildSimplicialSurface
#!  @BeginExample
#! MrType(tetra);
#! @EndExample
DeclareAttribute( "MrType", IsWildSimplicialSurface);
#TODO How is partial information handled?

#############################################################################
##
##
#!  @Section Functions for wild coloured simplicial surfaces
#!
#!
#!


#############################################################################
##
##  AllWildSimplicialSurfaces( gens[, mrtype] ) . . . . all simplicial surfaces
##  AllWildSimplicialSurfaces( grp[, mrtype] )
##  AllWildSimplicialSurfaces( sig1, sig2, sig3[, mrtype] )
##
##
#!  @Description
#!  This function computes all wild-coloured simplicial surfaces generated
#!  by a triple of involutions as specified in the input. If the optional
#!  argument <mrtype> is present, only those wit a predefined mrtype are
#!  constructed.
#!  The involution triple can be given to the function in various ways.
#!  Either they are input as a list <gens> of three involutions, or as
#!  a group <grp> whose generators are the tree involutions, or they can
#!  be input into the function as three arguments, one for each involution.
#! 
#!  In case the optional argument <mrtype>  is present, it can be used to
#!  restrict to wild-colourings for which some or all edges have a predefined
#!  colour. This is equivalent to marking the cycles of the three involutions
#!  as follows. If the edge $(j, j^\sigma_i)$ of the involution $\sigma_i$ is
#!  to be a reflection (mirror) let $k=1$, if it is to be a rotation, let 
#!  $k=2$ and if it can be either let $k=0.$ Then set $mrtype[i][j] = k$.
#!  @Returns a list of all wild-coloured simplicial surfaces with generating
#!  set given by three involutions.
#!  The function AllWildSimplicialSurfaces when called with the optional argument
#!  <mrtype> now returns all wild-coloured simplicial surfaces whose edges
#!  are coloured according to the restrictions imposed by <mrtype>.
#!  @Arguments gens,  a list of three involutions
#!
#DeclareOperation( "AllWildSimplicialSurfaces" ); 
#TODO should this be done by InstallOtherMethod instead of a case distinction


#
###  This program is free software: you can redistribute it and/or modify
###  it under the terms of the GNU General Public License as published by
###  the Free Software Foundation, either version 3 of the License, or
###  (at your option) any later version.
###
###  This program is distributed in the hope that it will be useful,
###  but WITHOUT ANY WARRANTY; without even the implied warranty of
###  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
###  GNU General Public License for more details.
###
###  You should have received a copy of the GNU General Public License
###  along with this program.  If not, see <http://www.gnu.org/licenses/>.
###
