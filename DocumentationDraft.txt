Plan for the documentation of the package.

General goals:
1) Readability (it should not be very hard to read)
2) It should not be necessary to understand the structure of the manual to understand the concepts.
3) Navigation to related topics should be very easy and intuitive.
4) The manual should be strongly modular.
5) The manual should give good terminal support (if called with ??)

For concreteness we employ several test-users as benchmarks:
Technician: Wants to know how to apply an obscure function in full generality.
Worker: Wants to use an elementary method but forgot the exact procedure. Wants an answer shortly.
Searcher: Doesn't know the package, searches for a functionality and wants to know if the package can provide it.
Perfectionist: Wants to understand the package and its functionality completely.
Casual: Wants to get a general perspective but doesn't want to invest too much time.

TODO: General problem: If someone goes into a chapter that is confusing/technical/complicated, they MIGHT skip it or go back.
    But they also might be frustrated and leave. How can we make it clear that they don't have to get frustrated?


--------------
About the chapter ordering:
    
    After the intro we start with "filters" to explain the general structure of this package (mainly to demonstrate PolygonalComplex and its relation to more specific filters).
        Pro: People know what this is all about
        Con: People might not skip and be bored by many different concepts
    
    Then we have "Incidence", the access to the incidence geometry. This is a central chapter. It is after the "filters"-chapter since it is defined for the most general case (polygonal complexes) which the reader might feel confused about if they are not properly introduced.
        Con: One can argue that the incidence geometry by itself motivates the definition of polygonal complex.. Then it should be first. (Although our definition of polygonal complex is more specific than the most general incidence geometry)
        Rebuttal (Pro): The above argument is not completely correct. While it is true that "incidence" feels less technical than "filters" this does not hold if one considers the chapter length - while "incidence" spends a lot of time developing and explaining different ways to present the same information (which is mostly uninteresting), "filters" does focus on a lot of terms but it also develops them with specific examples in play. If it were the case that "incidence" was just a few pages long it could be in front of "filters" to make the focus more clear. As it is it would detract from the main point of the package - the surfaces and complexes.
        Rebuttal (Pro): If we also consider when a linear reader will start skipping it should be clear that the first such point should be after an explanation of the basic package architecture. To show "incidence" first risks that the skipping point is before "filters" which would be a bad development. It would be more plausible to have "filters" first in this case as the information from "incidence" can also be gleamed by a casual reading.

    Then we have "Constructors", a technical chapter about different constructors. Since these differ for different filters, this HAS to be after the "filter"-chapter. Since they also heavily rely on the incidence structure it has to be after the "incidence"-chapter as well. This is therefore the earlies possible position.
        Pro: Having this early means that people can define their surfaces.
        Con: It is quite technical and therefore hinders reading flow.

    Finally we have "Properties" which is a catch-all for all things that are too small to get their own chapter
        -> Elementary properties (Euler Char. etc.)
        -> Connectivity
        -> Orientability
    This has to be after the "incidence"-chapter as most of its calculations and explanations rely on the incidence structure. Furthermore it does not demand a huge amount of attention (it is a conglomeration of random functions) and might not be hindered much by a reduced reading flow after the "constructors"-chapter.

    After this more specialised chapters (like modifcations and embeddings) follow (hopefully).
    They should be behind the others as they are not really needed to work with the core processes.

TODO change this to
    -> Constructing surfaces by their incidence structure
    -> Constructing surfaces from other surfaces
    -> Constructing surfaces from "nothing"(?) [this means data-base and examples, that could be better structured, like a section for platonic solids, one for random, one for doubleNgons...]
----------------


Chapter "Example implementations"
    Goal: Show how to efficiently use this package to program own methods
    Method: Show actual implementations of internal methods and explain the reasoning behind them.
    First show method, then implementation, then step-by-step development of the code (may be too front-heavy?)

Chapter "Errors and bugs"
    Goal: Document all possible error messages, together with explanation for their appearance and
        how to resolve them.
    Assume users find them by searching
    Also include what to do if errors are found (how to report them etc.)

TODO: include VertexEdgePaths to deal with CyclicOrderOfBoundary and CyclicOrderInFace (for faces with only 2 edges). -> Make a section about different paths (maybe including connectivity?)
    This would make the ordered access more homogeneous.
    The paths should be defined independently from them (to be easier to localize)
    Problem: They are a technical construction and might be boring to read "just because". At the same time, they are kind of central. Are there some method that use them? That would be especially convenient if it would fit into the access chapter..

------------------

Chapter "Modification of surfaces"
    TODO
    TODO rename Geodesics to AllGeodesics (to make distinction to individual clear)

Chapter "Development methods"
    TODO with example of wild simplicial surfaces (before they are introduced?)

Chapter "Anomalies"
    TODO: this seems to be a very short chapter. Should it be added to another chapter?
    YES. This should be part of a chapter about embeddings since this is one of the primary motivations behind anomalies (they are local obstacles for an embedding). Furthermore: If they are not folded together, we can't achieve an embedding.
    ALTERNATIVELY we could explain them as "features" that our definition does not prevent but this does not explain why we dwell on them.
    PROBLEM: There is currently no chapter about embeddings (and also no methods to support them)

Chapter: "Database of surfaces"
    this is not part of constructors chapter because it has several properties that are more than just construction.

Chapters (wild):
    Introduction
    Constructors (?)
    Edge Colouring functions
    Group structure (?)
    Coverings


