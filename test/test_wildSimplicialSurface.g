# This method supports the definition of a consistent colouring.
AllEdgesOfSameType := function( n, type )
	return List( [1,2,3], i -> List( [1..n], j -> type ) );
end;

##
##	Test the general consistency of a wild simplicial surface.
##	
TestWildSimplicialSurfaceConsistency := function( surface, messageSurfaceOrigin )
	# Since a wild simplicial surface also has to be a simplicial surface:
	TestSimplicialSurfaceConsistency( surface, messageSurfaceOrigin );

	if not IsWildSimplicialSurface( surface ) then
		Print( messageSurfaceOrigin );
		Print( " is not a wild simplicial surface.\n");
	fi;

	# Test the generators
	if Generators(surface) <> GeneratorsAttributeOfWildSimplicialSurface(surface) then
		Print( messageSurfaceOrigin );
		Print( " has inconsistent generators.\n");
	fi;


	# Test the group that is generated by the generators
	if GroupOfWildSimplicialSurface(surface) <> GroupAttributeOfWildSimplicialSurface(surface) then
		Print( messageSurfaceOrigin );
		Print( " has inconsistent generated group.\n");
	fi;
	if GroupOfWildSimplicialSurface(surface) <> Group( Generators( surface ) ) then
		Print( messageSurfaceOrigin );
		Print( ": Generated group and generators don't match.\n");
	fi;


	# Test the vertex group
	if VertexGroup(surface) <> VertexGroupAttributeOfWildSimplicialSurface(surface) then
		Print( messageSurfaceOrigin );
		Print( " has inconsistent vertex group.\n");
	fi;

	
	# Test the mr-type
	if MrType(surface) <> MrTypeAttributeOfWildSimplicialSurface(surface) or 
		MRType(surface) <> MrTypeAttributeOfWildSimplicialSurface(surface) then
		Print( messageSurfaceOrigin );
		Print( " has inconsistent mr-type.\n");
	fi;


	#TODO other tests.
end;
